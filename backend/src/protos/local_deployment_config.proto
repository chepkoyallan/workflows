syntax = "proto3";

package aus.orchestration.deployment_config;

import "aus/proto/orchestration/executable_spec.proto";
import "aus/proto/orchestration/metadata.proto";
import "aus/proto/orchestration/platform_config.proto";

message ExecutableSpec {
  oneof spec {
    aus.orchestration.executable_spec.PythonClassExecutableSpec
        python_class_executable_spec = 1;
    aus.orchestration.executable_spec.ContainerExecutableSpec
        container_executable_spec = 2;
    aus.orchestration.executable_spec.BeamExecutableSpec beam_executable_spec =
        3;
  }
}

message LocalPlatformConfig {
  oneof config {
    aus.orchestration.platform_config.DockerPlatformConfig
        docker_platform_config = 1;
  }
}

// Definition for local deployment configs.
message LocalDeploymentConfig {
  // A key from `node_id` to executor specs. Note that this will cover all nodes
  // that has business logic to process.
  map<string, ExecutableSpec> executor_specs = 1;
  // A key from `node_id` to custom driver specs. Note that this map usually has
  // less entries than the `executor_specs` as we only expect advanced users to
  // set custom driver logic.
  map<string, ExecutableSpec> custom_driver_specs = 2;
  // Connection config for ML-metadata.
  aus.orchestration.MLMDConnectionConfig metadata_connection_config = 3;
  // A key from `node_id` to platform configs. Specifies platform settings to
  // pass to individual node operators.
  map<string, LocalPlatformConfig> node_level_platform_configs = 4;
}
