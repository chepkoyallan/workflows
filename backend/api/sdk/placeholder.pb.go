// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: backend/api/sdk_protos/placeholder.proto

package sdk

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported formats to serialize a proto.
type ProtoOperator_SerializationFormat int32

const (
	ProtoOperator_DEFAULT     ProtoOperator_SerializationFormat = 0 // Currently unused.
	ProtoOperator_TEXT_FORMAT ProtoOperator_SerializationFormat = 1
	ProtoOperator_JSON        ProtoOperator_SerializationFormat = 2
	ProtoOperator_BINARY      ProtoOperator_SerializationFormat = 3
	// Emits an /inline/... file path with the proto's text-formatted content.
	// This is useful for passing to flags that expect a textproto config file.
	ProtoOperator_INLINE_FILE_TEXT_FORMAT ProtoOperator_SerializationFormat = 4
)

// Enum value maps for ProtoOperator_SerializationFormat.
var (
	ProtoOperator_SerializationFormat_name = map[int32]string{
		0: "DEFAULT",
		1: "TEXT_FORMAT",
		2: "JSON",
		3: "BINARY",
		4: "INLINE_FILE_TEXT_FORMAT",
	}
	ProtoOperator_SerializationFormat_value = map[string]int32{
		"DEFAULT":                 0,
		"TEXT_FORMAT":             1,
		"JSON":                    2,
		"BINARY":                  3,
		"INLINE_FILE_TEXT_FORMAT": 4,
	}
)

func (x ProtoOperator_SerializationFormat) Enum() *ProtoOperator_SerializationFormat {
	p := new(ProtoOperator_SerializationFormat)
	*p = x
	return p
}

func (x ProtoOperator_SerializationFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOperator_SerializationFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_api_sdk_protos_placeholder_proto_enumTypes[0].Descriptor()
}

func (ProtoOperator_SerializationFormat) Type() protoreflect.EnumType {
	return &file_backend_api_sdk_protos_placeholder_proto_enumTypes[0]
}

func (x ProtoOperator_SerializationFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoOperator_SerializationFormat.Descriptor instead.
func (ProtoOperator_SerializationFormat) EnumDescriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{7, 0}
}

type ComparisonOperator_Operation int32

const (
	ComparisonOperator_UNKNOWN      ComparisonOperator_Operation = 0
	ComparisonOperator_EQUAL        ComparisonOperator_Operation = 1
	ComparisonOperator_LESS_THAN    ComparisonOperator_Operation = 2
	ComparisonOperator_GREATER_THAN ComparisonOperator_Operation = 3
)

// Enum value maps for ComparisonOperator_Operation.
var (
	ComparisonOperator_Operation_name = map[int32]string{
		0: "UNKNOWN",
		1: "EQUAL",
		2: "LESS_THAN",
		3: "GREATER_THAN",
	}
	ComparisonOperator_Operation_value = map[string]int32{
		"UNKNOWN":      0,
		"EQUAL":        1,
		"LESS_THAN":    2,
		"GREATER_THAN": 3,
	}
)

func (x ComparisonOperator_Operation) Enum() *ComparisonOperator_Operation {
	p := new(ComparisonOperator_Operation)
	*p = x
	return p
}

func (x ComparisonOperator_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparisonOperator_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_api_sdk_protos_placeholder_proto_enumTypes[1].Descriptor()
}

func (ComparisonOperator_Operation) Type() protoreflect.EnumType {
	return &file_backend_api_sdk_protos_placeholder_proto_enumTypes[1]
}

func (x ComparisonOperator_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparisonOperator_Operation.Descriptor instead.
func (ComparisonOperator_Operation) EnumDescriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{9, 0}
}

type UnaryLogicalOperator_Operation int32

const (
	UnaryLogicalOperator_UNKNOWN UnaryLogicalOperator_Operation = 0
	UnaryLogicalOperator_NOT     UnaryLogicalOperator_Operation = 1
)

// Enum value maps for UnaryLogicalOperator_Operation.
var (
	UnaryLogicalOperator_Operation_name = map[int32]string{
		0: "UNKNOWN",
		1: "NOT",
	}
	UnaryLogicalOperator_Operation_value = map[string]int32{
		"UNKNOWN": 0,
		"NOT":     1,
	}
)

func (x UnaryLogicalOperator_Operation) Enum() *UnaryLogicalOperator_Operation {
	p := new(UnaryLogicalOperator_Operation)
	*p = x
	return p
}

func (x UnaryLogicalOperator_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnaryLogicalOperator_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_api_sdk_protos_placeholder_proto_enumTypes[2].Descriptor()
}

func (UnaryLogicalOperator_Operation) Type() protoreflect.EnumType {
	return &file_backend_api_sdk_protos_placeholder_proto_enumTypes[2]
}

func (x UnaryLogicalOperator_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnaryLogicalOperator_Operation.Descriptor instead.
func (UnaryLogicalOperator_Operation) EnumDescriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{10, 0}
}

type BinaryLogicalOperator_Operation int32

const (
	BinaryLogicalOperator_UNKNOWN BinaryLogicalOperator_Operation = 0
	BinaryLogicalOperator_AND     BinaryLogicalOperator_Operation = 1
	BinaryLogicalOperator_OR      BinaryLogicalOperator_Operation = 2
)

// Enum value maps for BinaryLogicalOperator_Operation.
var (
	BinaryLogicalOperator_Operation_name = map[int32]string{
		0: "UNKNOWN",
		1: "AND",
		2: "OR",
	}
	BinaryLogicalOperator_Operation_value = map[string]int32{
		"UNKNOWN": 0,
		"AND":     1,
		"OR":      2,
	}
)

func (x BinaryLogicalOperator_Operation) Enum() *BinaryLogicalOperator_Operation {
	p := new(BinaryLogicalOperator_Operation)
	*p = x
	return p
}

func (x BinaryLogicalOperator_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinaryLogicalOperator_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_api_sdk_protos_placeholder_proto_enumTypes[3].Descriptor()
}

func (BinaryLogicalOperator_Operation) Type() protoreflect.EnumType {
	return &file_backend_api_sdk_protos_placeholder_proto_enumTypes[3]
}

func (x BinaryLogicalOperator_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BinaryLogicalOperator_Operation.Descriptor instead.
func (BinaryLogicalOperator_Operation) EnumDescriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{11, 0}
}

// Supported formats to serialize a list.
type ListSerializationOperator_SerializationFormat int32

const (
	ListSerializationOperator_FORMAT_UNSPECIFIED  ListSerializationOperator_SerializationFormat = 0
	ListSerializationOperator_JSON                ListSerializationOperator_SerializationFormat = 1
	ListSerializationOperator_COMMA_SEPARATED_STR ListSerializationOperator_SerializationFormat = 2
)

// Enum value maps for ListSerializationOperator_SerializationFormat.
var (
	ListSerializationOperator_SerializationFormat_name = map[int32]string{
		0: "FORMAT_UNSPECIFIED",
		1: "JSON",
		2: "COMMA_SEPARATED_STR",
	}
	ListSerializationOperator_SerializationFormat_value = map[string]int32{
		"FORMAT_UNSPECIFIED":  0,
		"JSON":                1,
		"COMMA_SEPARATED_STR": 2,
	}
)

func (x ListSerializationOperator_SerializationFormat) Enum() *ListSerializationOperator_SerializationFormat {
	p := new(ListSerializationOperator_SerializationFormat)
	*p = x
	return p
}

func (x ListSerializationOperator_SerializationFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListSerializationOperator_SerializationFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_api_sdk_protos_placeholder_proto_enumTypes[4].Descriptor()
}

func (ListSerializationOperator_SerializationFormat) Type() protoreflect.EnumType {
	return &file_backend_api_sdk_protos_placeholder_proto_enumTypes[4]
}

func (x ListSerializationOperator_SerializationFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListSerializationOperator_SerializationFormat.Descriptor instead.
func (ListSerializationOperator_SerializationFormat) EnumDescriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{12, 0}
}

// A Placeholder can represent an input artifact, an output artifact,
// or an execution property.
type Placeholder_Type int32

const (
	Placeholder_INPUT_ARTIFACT       Placeholder_Type = 0
	Placeholder_OUTPUT_ARTIFACT      Placeholder_Type = 1
	Placeholder_EXEC_PROPERTY        Placeholder_Type = 2
	Placeholder_RUNTIME_INFO         Placeholder_Type = 3
	Placeholder_EXEC_INVOCATION      Placeholder_Type = 4
	Placeholder_ENVIRONMENT_VARIABLE Placeholder_Type = 5
)

// Enum value maps for Placeholder_Type.
var (
	Placeholder_Type_name = map[int32]string{
		0: "INPUT_ARTIFACT",
		1: "OUTPUT_ARTIFACT",
		2: "EXEC_PROPERTY",
		3: "RUNTIME_INFO",
		4: "EXEC_INVOCATION",
		5: "ENVIRONMENT_VARIABLE",
	}
	Placeholder_Type_value = map[string]int32{
		"INPUT_ARTIFACT":       0,
		"OUTPUT_ARTIFACT":      1,
		"EXEC_PROPERTY":        2,
		"RUNTIME_INFO":         3,
		"EXEC_INVOCATION":      4,
		"ENVIRONMENT_VARIABLE": 5,
	}
)

func (x Placeholder_Type) Enum() *Placeholder_Type {
	p := new(Placeholder_Type)
	*p = x
	return p
}

func (x Placeholder_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Placeholder_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_api_sdk_protos_placeholder_proto_enumTypes[5].Descriptor()
}

func (Placeholder_Type) Type() protoreflect.EnumType {
	return &file_backend_api_sdk_protos_placeholder_proto_enumTypes[5]
}

func (x Placeholder_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Placeholder_Type.Descriptor instead.
func (Placeholder_Type) EnumDescriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{14, 0}
}

// PlaceholderExpression is used in DSL IR executor specs to represent
// information that is not available at the authoring time. It will be rendered
// at execution time to provide the needed information.
type PlaceholderExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ExpressionType:
	//	*PlaceholderExpression_Value
	//	*PlaceholderExpression_Placeholder
	//	*PlaceholderExpression_Operator
	ExpressionType isPlaceholderExpression_ExpressionType `protobuf_oneof:"expression_type"`
}

func (x *PlaceholderExpression) Reset() {
	*x = PlaceholderExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceholderExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceholderExpression) ProtoMessage() {}

func (x *PlaceholderExpression) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceholderExpression.ProtoReflect.Descriptor instead.
func (*PlaceholderExpression) Descriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{0}
}

func (m *PlaceholderExpression) GetExpressionType() isPlaceholderExpression_ExpressionType {
	if m != nil {
		return m.ExpressionType
	}
	return nil
}

func (x *PlaceholderExpression) GetValue() *Value {
	if x, ok := x.GetExpressionType().(*PlaceholderExpression_Value); ok {
		return x.Value
	}
	return nil
}

func (x *PlaceholderExpression) GetPlaceholder() *Placeholder {
	if x, ok := x.GetExpressionType().(*PlaceholderExpression_Placeholder); ok {
		return x.Placeholder
	}
	return nil
}

func (x *PlaceholderExpression) GetOperator() *PlaceholderExpressionOperator {
	if x, ok := x.GetExpressionType().(*PlaceholderExpression_Operator); ok {
		return x.Operator
	}
	return nil
}

type isPlaceholderExpression_ExpressionType interface {
	isPlaceholderExpression_ExpressionType()
}

type PlaceholderExpression_Value struct {
	// ml_metadata.Value currently does not support boolean type.
	// Boolean values should be stored as string literals "true" or "false".
	Value *Value `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type PlaceholderExpression_Placeholder struct {
	Placeholder *Placeholder `protobuf:"bytes,2,opt,name=placeholder,proto3,oneof"`
}

type PlaceholderExpression_Operator struct {
	Operator *PlaceholderExpressionOperator `protobuf:"bytes,3,opt,name=operator,proto3,oneof"`
}

func (*PlaceholderExpression_Value) isPlaceholderExpression_ExpressionType() {}

func (*PlaceholderExpression_Placeholder) isPlaceholderExpression_ExpressionType() {}

func (*PlaceholderExpression_Operator) isPlaceholderExpression_ExpressionType() {}

// Placeholder operator helps extract or render placeholders.
// TODO(b/167431029): Add custom options to annotate operator types.
type PlaceholderExpressionOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OperatorType:
	//	*PlaceholderExpressionOperator_ArtifactUriOp
	//	*PlaceholderExpressionOperator_ArtifactValueOp
	//	*PlaceholderExpressionOperator_ConcatOp
	//	*PlaceholderExpressionOperator_IndexOp
	//	*PlaceholderExpressionOperator_ProtoOp
	//	*PlaceholderExpressionOperator_Base64EncodeOp
	//	*PlaceholderExpressionOperator_CompareOp
	//	*PlaceholderExpressionOperator_UnaryLogicalOp
	//	*PlaceholderExpressionOperator_BinaryLogicalOp
	//	*PlaceholderExpressionOperator_ArtifactPropertyOp
	//	*PlaceholderExpressionOperator_ListSerializationOp
	//	*PlaceholderExpressionOperator_ListConcatOp
	OperatorType isPlaceholderExpressionOperator_OperatorType `protobuf_oneof:"operator_type"`
}

func (x *PlaceholderExpressionOperator) Reset() {
	*x = PlaceholderExpressionOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceholderExpressionOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceholderExpressionOperator) ProtoMessage() {}

func (x *PlaceholderExpressionOperator) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceholderExpressionOperator.ProtoReflect.Descriptor instead.
func (*PlaceholderExpressionOperator) Descriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{1}
}

func (m *PlaceholderExpressionOperator) GetOperatorType() isPlaceholderExpressionOperator_OperatorType {
	if m != nil {
		return m.OperatorType
	}
	return nil
}

func (x *PlaceholderExpressionOperator) GetArtifactUriOp() *ArtifactUriOperator {
	if x, ok := x.GetOperatorType().(*PlaceholderExpressionOperator_ArtifactUriOp); ok {
		return x.ArtifactUriOp
	}
	return nil
}

func (x *PlaceholderExpressionOperator) GetArtifactValueOp() *ArtifactValueOperator {
	if x, ok := x.GetOperatorType().(*PlaceholderExpressionOperator_ArtifactValueOp); ok {
		return x.ArtifactValueOp
	}
	return nil
}

func (x *PlaceholderExpressionOperator) GetConcatOp() *ConcatOperator {
	if x, ok := x.GetOperatorType().(*PlaceholderExpressionOperator_ConcatOp); ok {
		return x.ConcatOp
	}
	return nil
}

func (x *PlaceholderExpressionOperator) GetIndexOp() *IndexOperator {
	if x, ok := x.GetOperatorType().(*PlaceholderExpressionOperator_IndexOp); ok {
		return x.IndexOp
	}
	return nil
}

func (x *PlaceholderExpressionOperator) GetProtoOp() *ProtoOperator {
	if x, ok := x.GetOperatorType().(*PlaceholderExpressionOperator_ProtoOp); ok {
		return x.ProtoOp
	}
	return nil
}

func (x *PlaceholderExpressionOperator) GetBase64EncodeOp() *Base64EncodeOperator {
	if x, ok := x.GetOperatorType().(*PlaceholderExpressionOperator_Base64EncodeOp); ok {
		return x.Base64EncodeOp
	}
	return nil
}

func (x *PlaceholderExpressionOperator) GetCompareOp() *ComparisonOperator {
	if x, ok := x.GetOperatorType().(*PlaceholderExpressionOperator_CompareOp); ok {
		return x.CompareOp
	}
	return nil
}

func (x *PlaceholderExpressionOperator) GetUnaryLogicalOp() *UnaryLogicalOperator {
	if x, ok := x.GetOperatorType().(*PlaceholderExpressionOperator_UnaryLogicalOp); ok {
		return x.UnaryLogicalOp
	}
	return nil
}

func (x *PlaceholderExpressionOperator) GetBinaryLogicalOp() *BinaryLogicalOperator {
	if x, ok := x.GetOperatorType().(*PlaceholderExpressionOperator_BinaryLogicalOp); ok {
		return x.BinaryLogicalOp
	}
	return nil
}

func (x *PlaceholderExpressionOperator) GetArtifactPropertyOp() *ArtifactPropertyOperator {
	if x, ok := x.GetOperatorType().(*PlaceholderExpressionOperator_ArtifactPropertyOp); ok {
		return x.ArtifactPropertyOp
	}
	return nil
}

func (x *PlaceholderExpressionOperator) GetListSerializationOp() *ListSerializationOperator {
	if x, ok := x.GetOperatorType().(*PlaceholderExpressionOperator_ListSerializationOp); ok {
		return x.ListSerializationOp
	}
	return nil
}

func (x *PlaceholderExpressionOperator) GetListConcatOp() *ListConcatOperator {
	if x, ok := x.GetOperatorType().(*PlaceholderExpressionOperator_ListConcatOp); ok {
		return x.ListConcatOp
	}
	return nil
}

type isPlaceholderExpressionOperator_OperatorType interface {
	isPlaceholderExpressionOperator_OperatorType()
}

type PlaceholderExpressionOperator_ArtifactUriOp struct {
	ArtifactUriOp *ArtifactUriOperator `protobuf:"bytes,1,opt,name=artifact_uri_op,json=artifactUriOp,proto3,oneof"`
}

type PlaceholderExpressionOperator_ArtifactValueOp struct {
	ArtifactValueOp *ArtifactValueOperator `protobuf:"bytes,2,opt,name=artifact_value_op,json=artifactValueOp,proto3,oneof"`
}

type PlaceholderExpressionOperator_ConcatOp struct {
	ConcatOp *ConcatOperator `protobuf:"bytes,3,opt,name=concat_op,json=concatOp,proto3,oneof"`
}

type PlaceholderExpressionOperator_IndexOp struct {
	IndexOp *IndexOperator `protobuf:"bytes,4,opt,name=index_op,json=indexOp,proto3,oneof"`
}

type PlaceholderExpressionOperator_ProtoOp struct {
	ProtoOp *ProtoOperator `protobuf:"bytes,5,opt,name=proto_op,json=protoOp,proto3,oneof"`
}

type PlaceholderExpressionOperator_Base64EncodeOp struct {
	Base64EncodeOp *Base64EncodeOperator `protobuf:"bytes,6,opt,name=base64_encode_op,json=base64EncodeOp,proto3,oneof"`
}

type PlaceholderExpressionOperator_CompareOp struct {
	CompareOp *ComparisonOperator `protobuf:"bytes,7,opt,name=compare_op,json=compareOp,proto3,oneof"`
}

type PlaceholderExpressionOperator_UnaryLogicalOp struct {
	UnaryLogicalOp *UnaryLogicalOperator `protobuf:"bytes,8,opt,name=unary_logical_op,json=unaryLogicalOp,proto3,oneof"`
}

type PlaceholderExpressionOperator_BinaryLogicalOp struct {
	BinaryLogicalOp *BinaryLogicalOperator `protobuf:"bytes,9,opt,name=binary_logical_op,json=binaryLogicalOp,proto3,oneof"`
}

type PlaceholderExpressionOperator_ArtifactPropertyOp struct {
	ArtifactPropertyOp *ArtifactPropertyOperator `protobuf:"bytes,10,opt,name=artifact_property_op,json=artifactPropertyOp,proto3,oneof"`
}

type PlaceholderExpressionOperator_ListSerializationOp struct {
	ListSerializationOp *ListSerializationOperator `protobuf:"bytes,11,opt,name=list_serialization_op,json=listSerializationOp,proto3,oneof"`
}

type PlaceholderExpressionOperator_ListConcatOp struct {
	ListConcatOp *ListConcatOperator `protobuf:"bytes,12,opt,name=list_concat_op,json=listConcatOp,proto3,oneof"`
}

func (*PlaceholderExpressionOperator_ArtifactUriOp) isPlaceholderExpressionOperator_OperatorType() {}

func (*PlaceholderExpressionOperator_ArtifactValueOp) isPlaceholderExpressionOperator_OperatorType() {
}

func (*PlaceholderExpressionOperator_ConcatOp) isPlaceholderExpressionOperator_OperatorType() {}

func (*PlaceholderExpressionOperator_IndexOp) isPlaceholderExpressionOperator_OperatorType() {}

func (*PlaceholderExpressionOperator_ProtoOp) isPlaceholderExpressionOperator_OperatorType() {}

func (*PlaceholderExpressionOperator_Base64EncodeOp) isPlaceholderExpressionOperator_OperatorType() {}

func (*PlaceholderExpressionOperator_CompareOp) isPlaceholderExpressionOperator_OperatorType() {}

func (*PlaceholderExpressionOperator_UnaryLogicalOp) isPlaceholderExpressionOperator_OperatorType() {}

func (*PlaceholderExpressionOperator_BinaryLogicalOp) isPlaceholderExpressionOperator_OperatorType() {
}

func (*PlaceholderExpressionOperator_ArtifactPropertyOp) isPlaceholderExpressionOperator_OperatorType() {
}

func (*PlaceholderExpressionOperator_ListSerializationOp) isPlaceholderExpressionOperator_OperatorType() {
}

func (*PlaceholderExpressionOperator_ListConcatOp) isPlaceholderExpressionOperator_OperatorType() {}

// ArtifactUriOperator extracts the Artifact URI from a placeholder expression.
// ArtifactUriOperator: Artifact -> String
type ArtifactUriOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. It must evaluate to an INPUT_ARTIFACT or OUTPUT_ARTIFACT type
	// placeholder.
	Expression *PlaceholderExpression `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	// Optional. If provided, this operator returns the URI for a specific split.
	// It's needed if one artifact, e.g., Examples Artifact, has multiple splits.
	Split string `protobuf:"bytes,2,opt,name=split,proto3" json:"split,omitempty"`
}

func (x *ArtifactUriOperator) Reset() {
	*x = ArtifactUriOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactUriOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactUriOperator) ProtoMessage() {}

func (x *ArtifactUriOperator) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactUriOperator.ProtoReflect.Descriptor instead.
func (*ArtifactUriOperator) Descriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{2}
}

func (x *ArtifactUriOperator) GetExpression() *PlaceholderExpression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *ArtifactUriOperator) GetSplit() string {
	if x != nil {
		return x.Split
	}
	return ""
}

// ArtifactPropertyOperator gets the property from a artifact placeholder.
// ArtifactPropertyOperator: Artifact -> String/Int/Float
type ArtifactPropertyOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. It must evaluate to an INPUT_ARTIFACT or OUTPUT_ARTIFACT type
	// placeholder.
	Expression *PlaceholderExpression `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	// Required. The key of the Artifact property.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Optional. If the property key is associated with a custom property.
	IsCustomProperty bool `protobuf:"varint,3,opt,name=is_custom_property,json=isCustomProperty,proto3" json:"is_custom_property,omitempty"`
}

func (x *ArtifactPropertyOperator) Reset() {
	*x = ArtifactPropertyOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactPropertyOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactPropertyOperator) ProtoMessage() {}

func (x *ArtifactPropertyOperator) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactPropertyOperator.ProtoReflect.Descriptor instead.
func (*ArtifactPropertyOperator) Descriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{3}
}

func (x *ArtifactPropertyOperator) GetExpression() *PlaceholderExpression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *ArtifactPropertyOperator) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ArtifactPropertyOperator) GetIsCustomProperty() bool {
	if x != nil {
		return x.IsCustomProperty
	}
	return false
}

// ArtifactValueOperator evaluates to the value of primitive-type artifacts
// from a placeholder expression, by reading the contents at the Artifact's URI.
// ArtifactValueOperator: Artifact -> String/Int/Float
type ArtifactValueOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. It must evaluate to a primitive-type artifact.
	Expression *PlaceholderExpression `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ArtifactValueOperator) Reset() {
	*x = ArtifactValueOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactValueOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactValueOperator) ProtoMessage() {}

func (x *ArtifactValueOperator) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactValueOperator.ProtoReflect.Descriptor instead.
func (*ArtifactValueOperator) Descriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{4}
}

func (x *ArtifactValueOperator) GetExpression() *PlaceholderExpression {
	if x != nil {
		return x.Expression
	}
	return nil
}

// ConcatOperator concatenates multiple placeholder expressions.
// ConcatOperator: List[String] -> String
type ConcatOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The placeholders to be concatenated.
	Expressions []*PlaceholderExpression `protobuf:"bytes,1,rep,name=expressions,proto3" json:"expressions,omitempty"`
}

func (x *ConcatOperator) Reset() {
	*x = ConcatOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcatOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcatOperator) ProtoMessage() {}

func (x *ConcatOperator) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcatOperator.ProtoReflect.Descriptor instead.
func (*ConcatOperator) Descriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{5}
}

func (x *ConcatOperator) GetExpressions() []*PlaceholderExpression {
	if x != nil {
		return x.Expressions
	}
	return nil
}

// IndexOperator extracts an element at the index if the PlaceholderExpression
// evaluates to something list-like or dict-like. For example, an INPUT_ARTIFACT
// or OUTPUT_ARTIFACT placeholder may contain multiple artifacts.
// IndexOperator: List[T] | Dict[str, T] -> T
type IndexOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The placeholder expression must evaluate to something list-like
	// or dict-like. Otherwise a runtime error will be thrown when evaluating
	// this operator.
	Expression *PlaceholderExpression `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	// Optional. The element index to be accessed if the expression is list-like.
	Index int64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// Optional. The key of the key-value pair if the expression is dict-like.
	// When evaluated, the corresponding value will be returned.
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *IndexOperator) Reset() {
	*x = IndexOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexOperator) ProtoMessage() {}

func (x *IndexOperator) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexOperator.ProtoReflect.Descriptor instead.
func (*IndexOperator) Descriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{6}
}

func (x *IndexOperator) GetExpression() *PlaceholderExpression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *IndexOperator) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *IndexOperator) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// ProtoOperator helps access and serialize the information in
// PlaceholderExpression if it evaluates to a proto.
// ProtoOperator: Proto -> String
type ProtoOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. An expression that evaluates to a proto type. For example,
	// EXEC_PROPERTY, RUNTIME_INFO or EXEC_INVOCATION type placeholders.
	Expression *PlaceholderExpression `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	// Required. Proto schema makes proto-valued placeholder expression
	// self-describing.
	ProtoSchema *ProtoOperator_ProtoSchema `protobuf:"bytes,2,opt,name=proto_schema,json=protoSchema,proto3" json:"proto_schema,omitempty"`
	// Optional. Access a field inside the proto, using proto notations.
	// If provided, the value at the proto_field_path is a non-message type,
	// it will be rendered directly.
	// If this field is not provided, or the proto_field_path points to a
	// sub-message, serialization_format is required. The sub-message will be
	// rendered using serialization_format.
	//
	// For example: proto_field_path=["[0]", ".a", ".b", "['c']"] is equivalent to
	// accessing p[0].a.b['c'], where p is the proto evaluated from the above
	// expression.
	ProtoFieldPath []string `protobuf:"bytes,3,rep,name=proto_field_path,json=protoFieldPath,proto3" json:"proto_field_path,omitempty"`
	// The format that the proto is serialized to.
	// Required if proto_field_path is unprovided or points to a sub-message.
	SerializationFormat ProtoOperator_SerializationFormat `protobuf:"varint,4,opt,name=serialization_format,json=serializationFormat,proto3,enum=ProtoOperator_SerializationFormat" json:"serialization_format,omitempty"`
}

func (x *ProtoOperator) Reset() {
	*x = ProtoOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOperator) ProtoMessage() {}

func (x *ProtoOperator) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOperator.ProtoReflect.Descriptor instead.
func (*ProtoOperator) Descriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{7}
}

func (x *ProtoOperator) GetExpression() *PlaceholderExpression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *ProtoOperator) GetProtoSchema() *ProtoOperator_ProtoSchema {
	if x != nil {
		return x.ProtoSchema
	}
	return nil
}

func (x *ProtoOperator) GetProtoFieldPath() []string {
	if x != nil {
		return x.ProtoFieldPath
	}
	return nil
}

func (x *ProtoOperator) GetSerializationFormat() ProtoOperator_SerializationFormat {
	if x != nil {
		return x.SerializationFormat
	}
	return ProtoOperator_DEFAULT
}

// Base64EncodeOperator encodes the output of another placeholder using
// url safe base64.
// The output of another placeholder must be string or bytes.
// Base64EncodeOperator: String/Bytes -> String
type Base64EncodeOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. It must evaluate to a String-like type value.
	Expression *PlaceholderExpression `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *Base64EncodeOperator) Reset() {
	*x = Base64EncodeOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base64EncodeOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base64EncodeOperator) ProtoMessage() {}

func (x *Base64EncodeOperator) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base64EncodeOperator.ProtoReflect.Descriptor instead.
func (*Base64EncodeOperator) Descriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{8}
}

func (x *Base64EncodeOperator) GetExpression() *PlaceholderExpression {
	if x != nil {
		return x.Expression
	}
	return nil
}

// ComparisonOperator compares one ArtifactPlaceholder with another, evaluating
// to a boolean at run time. This is primary used for encoding predicates used
// by conditionals in the Pipeline-authoring DSL.
//
// Example:
// Suppose `lhs` evaluates to 1, `rhs` evaluates to 2, and `op` is
// Operation.LESS_THAN.
// Then this comparison should evaluate to "true".
type ComparisonOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. It must evaluate to something that can be compared (e.g., int,
	// float, str). During evaluation, this expression is on the left side of the
	// comparison operation.
	Lhs *PlaceholderExpression `protobuf:"bytes,1,opt,name=lhs,proto3" json:"lhs,omitempty"`
	// Required. The placeholder expression to be compared against.
	// It must evaluate to something that can be compared (e.g., int, float, str).
	// During evaluation, this expression is on the right side of the comparison
	// operation.
	Rhs *PlaceholderExpression `protobuf:"bytes,2,opt,name=rhs,proto3" json:"rhs,omitempty"`
	// Required. The comparison op.
	Op ComparisonOperator_Operation `protobuf:"varint,3,opt,name=op,proto3,enum=ComparisonOperator_Operation" json:"op,omitempty"`
}

func (x *ComparisonOperator) Reset() {
	*x = ComparisonOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComparisonOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonOperator) ProtoMessage() {}

func (x *ComparisonOperator) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonOperator.ProtoReflect.Descriptor instead.
func (*ComparisonOperator) Descriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{9}
}

func (x *ComparisonOperator) GetLhs() *PlaceholderExpression {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *ComparisonOperator) GetRhs() *PlaceholderExpression {
	if x != nil {
		return x.Rhs
	}
	return nil
}

func (x *ComparisonOperator) GetOp() ComparisonOperator_Operation {
	if x != nil {
		return x.Op
	}
	return ComparisonOperator_UNKNOWN
}

// NotOperator applies a `NOT` boolean operation to a boolean expression.
type UnaryLogicalOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. It must evaluate to a boolean.
	Expression *PlaceholderExpression `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	// Required. The boolean op.
	Op UnaryLogicalOperator_Operation `protobuf:"varint,2,opt,name=op,proto3,enum=UnaryLogicalOperator_Operation" json:"op,omitempty"`
}

func (x *UnaryLogicalOperator) Reset() {
	*x = UnaryLogicalOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryLogicalOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryLogicalOperator) ProtoMessage() {}

func (x *UnaryLogicalOperator) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryLogicalOperator.ProtoReflect.Descriptor instead.
func (*UnaryLogicalOperator) Descriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{10}
}

func (x *UnaryLogicalOperator) GetExpression() *PlaceholderExpression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *UnaryLogicalOperator) GetOp() UnaryLogicalOperator_Operation {
	if x != nil {
		return x.Op
	}
	return UnaryLogicalOperator_UNKNOWN
}

// BinaryLogicalOperator applies `AND`, or `OR` to two boolean expressions.
type BinaryLogicalOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. It must evaluate to a boolean.
	Lhs *PlaceholderExpression `protobuf:"bytes,1,opt,name=lhs,proto3" json:"lhs,omitempty"`
	// Required. It must evaluate to a boolean.
	Rhs *PlaceholderExpression `protobuf:"bytes,2,opt,name=rhs,proto3" json:"rhs,omitempty"`
	// Required. The boolean op.
	Op BinaryLogicalOperator_Operation `protobuf:"varint,3,opt,name=op,proto3,enum=BinaryLogicalOperator_Operation" json:"op,omitempty"`
}

func (x *BinaryLogicalOperator) Reset() {
	*x = BinaryLogicalOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryLogicalOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryLogicalOperator) ProtoMessage() {}

func (x *BinaryLogicalOperator) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryLogicalOperator.ProtoReflect.Descriptor instead.
func (*BinaryLogicalOperator) Descriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{11}
}

func (x *BinaryLogicalOperator) GetLhs() *PlaceholderExpression {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *BinaryLogicalOperator) GetRhs() *PlaceholderExpression {
	if x != nil {
		return x.Rhs
	}
	return nil
}

func (x *BinaryLogicalOperator) GetOp() BinaryLogicalOperator_Operation {
	if x != nil {
		return x.Op
	}
	return BinaryLogicalOperator_UNKNOWN
}

// ListSerializationOperator encodes the output of another placeholder as json
// string. If elements in the list are proto messages, they get json serialized
// first. ListSerializationOperator: List[Any] -> String
type ListSerializationOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. It must evaluate to a List type value.
	Expression          *PlaceholderExpression                        `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	SerializationFormat ListSerializationOperator_SerializationFormat `protobuf:"varint,2,opt,name=serialization_format,json=serializationFormat,proto3,enum=ListSerializationOperator_SerializationFormat" json:"serialization_format,omitempty"`
}

func (x *ListSerializationOperator) Reset() {
	*x = ListSerializationOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSerializationOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSerializationOperator) ProtoMessage() {}

func (x *ListSerializationOperator) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSerializationOperator.ProtoReflect.Descriptor instead.
func (*ListSerializationOperator) Descriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{12}
}

func (x *ListSerializationOperator) GetExpression() *PlaceholderExpression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *ListSerializationOperator) GetSerializationFormat() ListSerializationOperator_SerializationFormat {
	if x != nil {
		return x.SerializationFormat
	}
	return ListSerializationOperator_FORMAT_UNSPECIFIED
}

// ListConcatOperator encodes a list of placeholders.
type ListConcatOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The list of placeholders to be encoded.
	Expressions []*PlaceholderExpression `protobuf:"bytes,1,rep,name=expressions,proto3" json:"expressions,omitempty"`
}

func (x *ListConcatOperator) Reset() {
	*x = ListConcatOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConcatOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConcatOperator) ProtoMessage() {}

func (x *ListConcatOperator) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConcatOperator.ProtoReflect.Descriptor instead.
func (*ListConcatOperator) Descriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{13}
}

func (x *ListConcatOperator) GetExpressions() []*PlaceholderExpression {
	if x != nil {
		return x.Expressions
	}
	return nil
}

// Placeholder is an inseparable unit in a placeholder expression that
// pipeline information will be injected.
type Placeholder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Type of the placeholder.
	Type Placeholder_Type `protobuf:"varint,1,opt,name=type,proto3,enum=Placeholder_Type" json:"type,omitempty"`
	// Required. Key to the placeholder.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Placeholder) Reset() {
	*x = Placeholder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placeholder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placeholder) ProtoMessage() {}

func (x *Placeholder) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placeholder.ProtoReflect.Descriptor instead.
func (*Placeholder) Descriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{14}
}

func (x *Placeholder) GetType() Placeholder_Type {
	if x != nil {
		return x.Type
	}
	return Placeholder_INPUT_ARTIFACT
}

func (x *Placeholder) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ProtoOperator_ProtoSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message type for the proto. It must exist in the file_descriptors below.
	MessageType string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// Definitions of all dependencies of the above message type.
	// Optional if the descriptor exists in the base file descriptor pool
	// during placeholder evaluation.
	FileDescriptors *descriptorpb.FileDescriptorSet `protobuf:"bytes,2,opt,name=file_descriptors,json=fileDescriptors,proto3" json:"file_descriptors,omitempty"`
}

func (x *ProtoOperator_ProtoSchema) Reset() {
	*x = ProtoOperator_ProtoSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoOperator_ProtoSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOperator_ProtoSchema) ProtoMessage() {}

func (x *ProtoOperator_ProtoSchema) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_sdk_protos_placeholder_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOperator_ProtoSchema.ProtoReflect.Descriptor instead.
func (*ProtoOperator_ProtoSchema) Descriptor() ([]byte, []int) {
	return file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ProtoOperator_ProtoSchema) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *ProtoOperator_ProtoSchema) GetFileDescriptors() *descriptorpb.FileDescriptorSet {
	if x != nil {
		return x.FileDescriptors
	}
	return nil
}

var File_backend_api_sdk_protos_placeholder_proto protoreflect.FileDescriptor

var file_backend_api_sdk_protos_placeholder_proto_rawDesc = []byte{
	0x0a, 0x28, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x64,
	0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x64, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa0, 0x06, 0x0a, 0x1d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x55, 0x72, 0x69, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x55, 0x72, 0x69, 0x4f, 0x70, 0x12, 0x44, 0x0a, 0x11, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x12, 0x2e, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x5f, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x4f, 0x70, 0x12, 0x2b, 0x0a,
	0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x70, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x70, 0x12, 0x41, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4f, 0x70,
	0x12, 0x41, 0x0a, 0x10, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x4f, 0x70, 0x12, 0x44, 0x0a, 0x11, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x12, 0x4d, 0x0a, 0x14, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6f,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x12, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4f, 0x70, 0x12, 0x50, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x5f, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x63, 0x61, 0x74, 0x4f, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x63, 0x0a, 0x13, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x55, 0x72, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x36, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x22, 0x92, 0x01,
	0x0a, 0x18, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x22, 0x4f, 0x0a, 0x15, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x6f, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x36, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0xf0, 0x03, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x55, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x13, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0x7f, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x10,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x66, 0x0a, 0x13, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x10, 0x04, 0x22, 0x4e, 0x0a, 0x14, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xdd, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x03, 0x6c, 0x68,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x6c, 0x68, 0x73, 0x12, 0x28, 0x0a, 0x03, 0x72, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x72, 0x68, 0x73, 0x12, 0x2d,
	0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x44, 0x0a,
	0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41,
	0x4e, 0x10, 0x03, 0x22, 0xa2, 0x01, 0x0a, 0x14, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x21, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x54, 0x10, 0x01, 0x22, 0xc8, 0x01, 0x0a, 0x15, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x03, 0x6c, 0x68, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6c, 0x68, 0x73, 0x12, 0x28, 0x0a, 0x03,
	0x72, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x72, 0x68, 0x73, 0x12, 0x30, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x29, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x52, 0x10, 0x02, 0x22, 0x88, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x14, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x13, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x50, 0x0a, 0x13,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a,
	0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x5f, 0x53,
	0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x10, 0x02, 0x22, 0x4e,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcc,
	0x01, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41,
	0x43, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x41,
	0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x58, 0x45,
	0x43, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x42, 0x33, 0x5a,
	0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x70,
	0x6b, 0x6f, 0x79, 0x61, 0x6c, 0x6c, 0x61, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x64, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_api_sdk_protos_placeholder_proto_rawDescOnce sync.Once
	file_backend_api_sdk_protos_placeholder_proto_rawDescData = file_backend_api_sdk_protos_placeholder_proto_rawDesc
)

func file_backend_api_sdk_protos_placeholder_proto_rawDescGZIP() []byte {
	file_backend_api_sdk_protos_placeholder_proto_rawDescOnce.Do(func() {
		file_backend_api_sdk_protos_placeholder_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_api_sdk_protos_placeholder_proto_rawDescData)
	})
	return file_backend_api_sdk_protos_placeholder_proto_rawDescData
}

var file_backend_api_sdk_protos_placeholder_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_backend_api_sdk_protos_placeholder_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_backend_api_sdk_protos_placeholder_proto_goTypes = []interface{}{
	(ProtoOperator_SerializationFormat)(0),             // 0: ProtoOperator.SerializationFormat
	(ComparisonOperator_Operation)(0),                  // 1: ComparisonOperator.Operation
	(UnaryLogicalOperator_Operation)(0),                // 2: UnaryLogicalOperator.Operation
	(BinaryLogicalOperator_Operation)(0),               // 3: BinaryLogicalOperator.Operation
	(ListSerializationOperator_SerializationFormat)(0), // 4: ListSerializationOperator.SerializationFormat
	(Placeholder_Type)(0),                              // 5: Placeholder.Type
	(*PlaceholderExpression)(nil),                      // 6: PlaceholderExpression
	(*PlaceholderExpressionOperator)(nil),              // 7: PlaceholderExpressionOperator
	(*ArtifactUriOperator)(nil),                        // 8: ArtifactUriOperator
	(*ArtifactPropertyOperator)(nil),                   // 9: ArtifactPropertyOperator
	(*ArtifactValueOperator)(nil),                      // 10: ArtifactValueOperator
	(*ConcatOperator)(nil),                             // 11: ConcatOperator
	(*IndexOperator)(nil),                              // 12: IndexOperator
	(*ProtoOperator)(nil),                              // 13: ProtoOperator
	(*Base64EncodeOperator)(nil),                       // 14: Base64EncodeOperator
	(*ComparisonOperator)(nil),                         // 15: ComparisonOperator
	(*UnaryLogicalOperator)(nil),                       // 16: UnaryLogicalOperator
	(*BinaryLogicalOperator)(nil),                      // 17: BinaryLogicalOperator
	(*ListSerializationOperator)(nil),                  // 18: ListSerializationOperator
	(*ListConcatOperator)(nil),                         // 19: ListConcatOperator
	(*Placeholder)(nil),                                // 20: Placeholder
	(*ProtoOperator_ProtoSchema)(nil),                  // 21: ProtoOperator.ProtoSchema
	(*Value)(nil),                                      // 22: metadata_store.Value
	(*descriptorpb.FileDescriptorSet)(nil),             // 23: google.protobuf.FileDescriptorSet
}
var file_backend_api_sdk_protos_placeholder_proto_depIdxs = []int32{
	22, // 0: PlaceholderExpression.value:type_name -> metadata_store.Value
	20, // 1: PlaceholderExpression.placeholder:type_name -> Placeholder
	7,  // 2: PlaceholderExpression.operator:type_name -> PlaceholderExpressionOperator
	8,  // 3: PlaceholderExpressionOperator.artifact_uri_op:type_name -> ArtifactUriOperator
	10, // 4: PlaceholderExpressionOperator.artifact_value_op:type_name -> ArtifactValueOperator
	11, // 5: PlaceholderExpressionOperator.concat_op:type_name -> ConcatOperator
	12, // 6: PlaceholderExpressionOperator.index_op:type_name -> IndexOperator
	13, // 7: PlaceholderExpressionOperator.proto_op:type_name -> ProtoOperator
	14, // 8: PlaceholderExpressionOperator.base64_encode_op:type_name -> Base64EncodeOperator
	15, // 9: PlaceholderExpressionOperator.compare_op:type_name -> ComparisonOperator
	16, // 10: PlaceholderExpressionOperator.unary_logical_op:type_name -> UnaryLogicalOperator
	17, // 11: PlaceholderExpressionOperator.binary_logical_op:type_name -> BinaryLogicalOperator
	9,  // 12: PlaceholderExpressionOperator.artifact_property_op:type_name -> ArtifactPropertyOperator
	18, // 13: PlaceholderExpressionOperator.list_serialization_op:type_name -> ListSerializationOperator
	19, // 14: PlaceholderExpressionOperator.list_concat_op:type_name -> ListConcatOperator
	6,  // 15: ArtifactUriOperator.expression:type_name -> PlaceholderExpression
	6,  // 16: ArtifactPropertyOperator.expression:type_name -> PlaceholderExpression
	6,  // 17: ArtifactValueOperator.expression:type_name -> PlaceholderExpression
	6,  // 18: ConcatOperator.expressions:type_name -> PlaceholderExpression
	6,  // 19: IndexOperator.expression:type_name -> PlaceholderExpression
	6,  // 20: ProtoOperator.expression:type_name -> PlaceholderExpression
	21, // 21: ProtoOperator.proto_schema:type_name -> ProtoOperator.ProtoSchema
	0,  // 22: ProtoOperator.serialization_format:type_name -> ProtoOperator.SerializationFormat
	6,  // 23: Base64EncodeOperator.expression:type_name -> PlaceholderExpression
	6,  // 24: ComparisonOperator.lhs:type_name -> PlaceholderExpression
	6,  // 25: ComparisonOperator.rhs:type_name -> PlaceholderExpression
	1,  // 26: ComparisonOperator.op:type_name -> ComparisonOperator.Operation
	6,  // 27: UnaryLogicalOperator.expression:type_name -> PlaceholderExpression
	2,  // 28: UnaryLogicalOperator.op:type_name -> UnaryLogicalOperator.Operation
	6,  // 29: BinaryLogicalOperator.lhs:type_name -> PlaceholderExpression
	6,  // 30: BinaryLogicalOperator.rhs:type_name -> PlaceholderExpression
	3,  // 31: BinaryLogicalOperator.op:type_name -> BinaryLogicalOperator.Operation
	6,  // 32: ListSerializationOperator.expression:type_name -> PlaceholderExpression
	4,  // 33: ListSerializationOperator.serialization_format:type_name -> ListSerializationOperator.SerializationFormat
	6,  // 34: ListConcatOperator.expressions:type_name -> PlaceholderExpression
	5,  // 35: Placeholder.type:type_name -> Placeholder.Type
	23, // 36: ProtoOperator.ProtoSchema.file_descriptors:type_name -> google.protobuf.FileDescriptorSet
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_backend_api_sdk_protos_placeholder_proto_init() }
func file_backend_api_sdk_protos_placeholder_proto_init() {
	if File_backend_api_sdk_protos_placeholder_proto != nil {
		return
	}
	file_backend_api_sdk_protos_metadata_store_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_backend_api_sdk_protos_placeholder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceholderExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_api_sdk_protos_placeholder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceholderExpressionOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_api_sdk_protos_placeholder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactUriOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_api_sdk_protos_placeholder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactPropertyOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_api_sdk_protos_placeholder_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactValueOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_api_sdk_protos_placeholder_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcatOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_api_sdk_protos_placeholder_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_api_sdk_protos_placeholder_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_api_sdk_protos_placeholder_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base64EncodeOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_api_sdk_protos_placeholder_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComparisonOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_api_sdk_protos_placeholder_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryLogicalOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_api_sdk_protos_placeholder_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryLogicalOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_api_sdk_protos_placeholder_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSerializationOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_api_sdk_protos_placeholder_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConcatOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_api_sdk_protos_placeholder_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Placeholder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_api_sdk_protos_placeholder_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoOperator_ProtoSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_backend_api_sdk_protos_placeholder_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PlaceholderExpression_Value)(nil),
		(*PlaceholderExpression_Placeholder)(nil),
		(*PlaceholderExpression_Operator)(nil),
	}
	file_backend_api_sdk_protos_placeholder_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*PlaceholderExpressionOperator_ArtifactUriOp)(nil),
		(*PlaceholderExpressionOperator_ArtifactValueOp)(nil),
		(*PlaceholderExpressionOperator_ConcatOp)(nil),
		(*PlaceholderExpressionOperator_IndexOp)(nil),
		(*PlaceholderExpressionOperator_ProtoOp)(nil),
		(*PlaceholderExpressionOperator_Base64EncodeOp)(nil),
		(*PlaceholderExpressionOperator_CompareOp)(nil),
		(*PlaceholderExpressionOperator_UnaryLogicalOp)(nil),
		(*PlaceholderExpressionOperator_BinaryLogicalOp)(nil),
		(*PlaceholderExpressionOperator_ArtifactPropertyOp)(nil),
		(*PlaceholderExpressionOperator_ListSerializationOp)(nil),
		(*PlaceholderExpressionOperator_ListConcatOp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_api_sdk_protos_placeholder_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_backend_api_sdk_protos_placeholder_proto_goTypes,
		DependencyIndexes: file_backend_api_sdk_protos_placeholder_proto_depIdxs,
		EnumInfos:         file_backend_api_sdk_protos_placeholder_proto_enumTypes,
		MessageInfos:      file_backend_api_sdk_protos_placeholder_proto_msgTypes,
	}.Build()
	File_backend_api_sdk_protos_placeholder_proto = out.File
	file_backend_api_sdk_protos_placeholder_proto_rawDesc = nil
	file_backend_api_sdk_protos_placeholder_proto_goTypes = nil
	file_backend_api_sdk_protos_placeholder_proto_depIdxs = nil
}
