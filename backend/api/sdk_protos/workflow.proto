syntax = "proto3";

package workflow;
import "backend/api/sdk_protos/metadata_store.proto";
import "backend/api/sdk_protos/placeholder.proto";

option go_package = "github.com/chepkoyallan/workflows/backend/api/sdk";

// Definition for a udsl workflow. This is also a definition od a sub workflow
message Workflow {
    enum ExecutionMode {
        EXECUTION_MODE_UNSPECIFIED = 0;
        SYNC = 1;
        ASYNC = 2;
    }

    // A node inside a workflow can be either a  `WorkflowNode` or a `Workflow` as a 
    // subworkflow
    message WorkflowOrNode{
        oneof node {
            // A normal workflow node. This is the unsplittable execution unit
            WorkflowNode workflow_node = 1;
            // sub-workflows should only have execution mode `SYNC`.
            Workflow sub_workflow = 2;
        }
    }
}

// Workflow node definition
message WorkflowNode {
    // Basic info of a workflow node
    NodeInfo node_info = 1;

    // Specification for contexts that this node belongs to

}

// Basic information of a workflow node, including the type and id of the node
// The information in `NodeInfo` should stay stable across time. Asynchronous
// data fetching behaviour might change if this changes
message NodeInfo {
    // Metadata type of the node
    metadata_store.ExecutionType type = 1;

    // The unique identifier of the node within the workflow definition. This id
    // will be used in upstream and downstream nodes to indicate node
    // dependancies. this is generated by the system
    string id = 2;
}

// Specifications of contexts that this node belongs to. All input artifacts,
// output artifacts and execution of the node will be linked to the (Metadata store)
// contexts generated from these specifications.
message NodeContexts {
    repeated ContextSpec contexts = 1;
}

// Spec of a context
message ContextSpec {
    // The type of the context
    metadata_store.ContextType type = 1;

    // The name of the context
    IrValue name = 2;
    
    //properties of the context
    map<string, IrValue> properties = 3;
}

// Definition for Value in uDSL IR. A Value instance can be one of: a field
// value that is determined during compilation time, a runtime parameter
// which will be determined during runtime, or a placeholder which will be
// determined during runtime / before / at execution time.
message IrValue {
    oneof value {
        metadata_store.Value field_value =1;
        RuntimeParameter runtime_parameter = 2;
        StructuralRuntimeParameter structural_runtime_parameter = 3;
        PlaceholderExpression placeholder = 5;
    }
}

// Definition for a runtime parameters
message RuntimeParameter {
    enum Type {
        TYPE_UNSPECIFIED = 0;
        INT = 1;
        DOUBLE = 2;
        STRING=3;
    }

    // Required field. The name of the runtime parameter. This should be globally
    // unique within the workflow scope
    string name = 1;
    // Required field. the type of the runtime parameter
    Type type = 2;
    // Optional field. Default value of the runtime parameter. If not set and the
    // runtime parameter value is not provided during runtime, an error will be
    // raised.
    metadata_store.Value default_value = 3;
}

// upport structural runtime parameter at the SDK level.
// Definition for structural runtime parameters.
// This can be used to combine several runtime parameters into a single string
// with parts of that being pre-set by users. Consider the following example:
//   `[RuntimeParameter(a), '_some_string_', RuntimeParameter(b)]`
// During runtime, the system will resolve the runtime parameters in the list
// and concatenate all pieces in the list together into a single string.
message StructuralRuntimeParameter {
    // Definition of each part in the structural runtime parameter. Each part can
    // be either a string or a runtime parameter.
    message StringOrRuntimeParameter {
        oneof value {
            string constant_value = 1;
            RuntimeParameter runtime_parameter = 2;
        }
    }
    repeated StringOrRuntimeParameter parts = 1;
}